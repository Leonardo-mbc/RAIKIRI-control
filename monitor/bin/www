#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('arduino_port:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io').listen(server);

var serialPort = require('serialport');
var serial = new serialPort.SerialPort("/dev/cu.RNBT-B1C9-RNI-SPP", {
//var serial = new serialPort.SerialPort("/dev/cu.usbserial-A603BT0A", {
//var serial = new serialPort.SerialPort("/dev/cu.usbserial-AH02TLP", {
    baudRate: 9600,
    dataBits: 8,
    parity: 'none',
    stopBits: 1,
    flowControl: false,
    parser: serialPort.parsers.readline("\n")
});

serial.on('open',function(){
    console.log('serial open');

    serial.on('data',function(data){
        console.log(data);
        var buffer = new Buffer(data, 'utf8');
        var jsonData;
        try {
            jsonData = JSON.parse(buffer);
            console.log(jsonData);
            //if(jsonData.speed) io.sockets.json.emit('speed_emit', { speed: jsonData.speed });
            if(jsonData.speed) io.sockets.json.emit('dj_emit', { speed: jsonData.speed });
            if(jsonData.acclr) io.sockets.json.emit('acclr_emit', { acclr: jsonData.acclr });
            if(jsonData.rotation) io.sockets.json.emit('rotation_emit', { rotation: jsonData.rotation });
            if(jsonData.sign) io.sockets.json.emit('sign_emit', { sign: jsonData.sign });
        } catch(e) {
            return;
        }
    });
});

io.on('connection', function(socket) {
    console.log('socket open');

    socket.on('moterSignal', function(data) {
        //console.log(data);
        serial.write(data.sgn, function(err, results) {
            //console.log('err ' + err);
            //console.log('results ' + results);
        });
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
